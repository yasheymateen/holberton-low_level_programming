!<arch>
_putchar.c      1562981272  501   20    100644  270       `
#include <unistd.h>
#include "holberton.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
3-islower.c     1562981272  501   20    100744  214       `
#include "holberton.h"
/**
 * _islower - checks for a lowercase character
 * @c: character
 * Return: 1 if lowercase, 0 otherwise
 */

int _islower(int c)
{
if (c > 'a' && c <= 'z')
return (1);
else
return (0);
}

4-isalpha.c     1562981272  501   20    100744  252       `
#include "holberton.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: character to check
 * Return: 1 if c is letter, 0 otherwise
 */

int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
return (1);
else
return (0);
}
6-abs.c         1562981272  501   20    100744  187       `
#include "holberton.h"
/**
 * _abs - function that computes absolute value of an integer
 * @a: integer
 * Return: absolute value
 */

int _abs(int a)
{
if (a < 0)
a *= -1;
return (a);
}

0-isupper.c     1562981273  501   20    100644  211       `
#include "holberton.h"

/**
 * isupper - this function checks for uppercase character
 * @c: character to check
 *
 * Return: 1 if uppercase, 0 if not
 */
int _isupper(int c)
{
 return (c >= 'A' && c <= 'Z');
}

1-isdigit.c     1562981273  501   20    100644  192       `
#include "holberton.h"

/**
 *isdigit- checks if character is digit
 *@c: character to check for
 *
 *Return: 1 if digit, 0 if not
 */
int _isdigit(int c)
{
  return (c >= '0' && c <= '9');
}
2-strlen.c      1562981272  501   20    100644  273       `
#include "holberton.h"
/**
 * _strlen - returns length of a string given a character input
 * @s: address of string input
 * @length: length of string
 * return - void.
 */
int _strlen(char *s)
{
int length = 0;

while (*(s + length) != '\0')
length++;

return (length);
}

4-puts.c        1562981272  501   20    100644  164       `
#include <stdio.h>
/**
 * main - Prints out string
 * Return: void
 */
int main(void)
{
puts("\"Programming is like building a multilingual puzzle");
return (0);
}
3-puts.c        1562981272  501   20    100755  272       `
#include "holberton.h"

/**
 * _puts - prings a string followed by a new line.
 * @str: address of string to be printed
 * Return: void
 */
void _puts(char *str)
{
int length = 0;

while (*(str + length) != '\0')
{
_putchar(*(str + length));
length++;
}
_putchar('\n');
}
9-strcpy.c      1562981272  501   20    100644  328       `
#include "holberton.h"

/**
 * str_cpy - function t hat copies the string pointed to by src
 * @dest: pointer of address of string
 * @src: pointer to string to be copied
 * Return: void.
 */

char *_strcpy(char *dest, char *src)
{
int i;

for (i = 0; src[i] != '\0'; i++)
{
dest[i] = src[i];
}
dest[i] = '\0';
return (dest);
}
100-atoi.c      1562981272  501   20    100744  471       `
#include "holberton.h"
#include <stdio.h>

/**
 * _atoi - converts string into integer
 * @s: string to convert to integer
 *
 * Return: int
 */
int _atoi(char *s)
{
int n, i, sign;

sign = 1;
i = 0;
n = 0;

while ((s[i] < '0' || s[i] > '9') && s[i] != 0)
{
if (s[i] == '-')
sign *= -1;
i++;
}
while ((s[i] >= '0' && s[i] <= '9') && s[i] != '0')
{
if (n >= 0)
{
n = n * 10 - (s[i] - '0');
i++;
}
else
{
n = n * 10 - (s[i] - '0');
i++;
}
}
sign *= -1;
return (n *sign);
}

0-strcat.c      1562981273  501   20    100644  169       `
# 1 "copy_files"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 360 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "copy_files" 2
!#/bin/bash
cp {$(find . -name


1-strncat.c     1562981272  501   20    100644  367       `
#include "holberton.h"
/**
 * _strncpy - concatenates two strings.
 * @dest: destination string.
 * @src: source string.
 * @n: number of bytes to use.
 * Return: pointer to resulting string.
 */

char *_strncpy(char *dest, char *src, int n)
{
int a, b;

a = 0;
while (dest[a])
a++;
for (b = 0; b < n; b++)
{
dest[a] = src[b];
a++;
}
dest[a] = '\0';
return (dest);
}

2-strncpy.c     1562981272  501   20    100644  345       `
#include "holberton.h"
/**
 * _strncpy - functiono that copies a string
 * @dest: destination string
 * @src: source string
 * @n: number of bytes
 * Return: destination string
 */

char *_strncpy(char *dest, char *src, int n)
{
int a;
for (a = 0; src[a] != '\0' && a < n; a++)
dest[a] = src[a];
while (a < n)
dest[a++] = '\0';
return (dest);
}

3-strcmp.c      1562981272  501   20    100644  315       `
#include "holberton.h"
/**
 * _strcmp - function that compares two strings
 * @s1: 1st string to compare
 * @s2: 2nd string to compare
 * Return: difference between strings
 */

int _strcmp(char *s1, char *s2)
{
int a;

for (a = 0; s1[a] != '\0' && s2[a] != '\0' && s1[a] == s2[a]; a++)
;
return (s1[a] - s2[a]);
}

0-memset.c      1562981273  501   20    100644  316       `
#include "holberton.h"

/**
 * _memset - fills the first n bytes of memory area.
 * @s: memory area pointer.
 * @b: constant byte.
 * @n:  bytes of memory.
 * Return: pointer to memory area s.
 */

char *_memset(char *s, char b, unsigned int n)
{
unsigned int x;

for (x = 0; x < n; x++)
{
s[x] = b;
}
return (s);
}
1-memcpy.c      1562981273  501   20    100644  348       `
#include "holberton.h"
/**
 * _memcpy - function that copies memory area.
 * @dest: destinataion memory area.
 * @src: source memory area.
 * @n: number of bytes from memory area.
 * Return: pointer to dest.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int x;

for (x = 0; x < n; x++)
{
dest[x] = src[x];
}
return (dest);
}
2-strchr.c      1562981273  501   20    100644  396       `
#include "holberton.h"
/**
 * _strchr - functioin that locates a character in a string.
 * @s: string in which to locate.
 * @c: character c for which occurrence is checked.
 * Return: pointer to first occurrence of c (NULL if not found).
 */

char *_strchr(char *s, char c)
{
while (*s != '\0')
{
if (*s == c)
{
return (s);
}
else if (*(s + 1) == c)
{
return (s + 1);
}
s++;
}
return (s + 1);
}
3-strspn.c      1562981273  501   20    100744  450       `
#include "holberton.h"
/**
 * _strspn - function that gets length of a prefix substring
 * @s: initial segment which consists bytes from accept
 * @accept: contains bytes contained in s
 * Return: number of bytes in initial segment s
 */

unsigned int _strspn(char *s, char *accept)
{
unsigned int a, b;

a = 0;
while (s[a] != '\0')
{
b = 0;
while (accept[b] != '\0' && s[a] != accept[b])
b++;
if (accept[b] == '\0')
return (a);
a++;
}
return (a);
}
4-strpbrk.c     1562981273  501   20    100644  458       `
#include "holberton.h"
#include <stdlib.h>
/**
 *_strpbrk - function that searches a string for any of a set of bytes
 *@s: string pointer
 *@accept: string for which to search bytes
 *Return - pointer to byte in s that matches one of the bytes in accept or NULL
 */
char *_strpbrk(char *s, char *accept);
{
	int i;

	while (*s)
	{
		i = 0;
		while (*(accept + i) != '\0')
		{
			if (*(accept + i) == *s)
				return (s);
			i++;
		}
		s++;
	}
	return (0);
}
5-strstr.c      1562981273  501   20    100644  526       `
#include "holberton.h"

/**
 * _strstr - function that locates a substring.
 * @haystack: string from which other string is to be located
 * @needle: substring to find
 * Return: a pointer to the beginning of the located substring (or NULL)
 */
char *_strstr(char *haystack, char *needle)
{
while (*haystack != '\0')
{
char *beg = haystack;
char *occur = needle;

while (*occur == *haystack && *occur != '\0' && *haystack != '\0')
{
haystack++;
occur++;
}
if (*occur == '\0')
return (beg);
haystack = beg + 1;
}
return (0);
}
